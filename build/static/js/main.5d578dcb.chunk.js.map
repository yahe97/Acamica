{"version":3,"sources":["corazon.svg","logo.svg","google.svg","hello.svg","gif.gif","firebase.js","App.jsx","index.jsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","loginConGoogle","signInWithPopup","logout","signOut","App","useState","user1","currentUser","tweets","setTweets","tweet","autor","usert","setTweet","user","setUser","useEffect","desuscribir","collection","onSnapshot","snapshot","docs","map","doc","data","id","likes","onAuthStateChanged","console","log","handleChange","e","nuevoTweet","target","name","value","email","ExampleToast","children","show","toggleShow","Button","onClick","Toast","onClose","Header","className","Body","height","weight","src","logo","alt","photoURL","hello","font","background","google","onChange","cols","rows","placeholder","type","preventDefault","add","loadingicon","delete","update","corazon","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5d578dcb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/corazon.c759f248.svg\";","export default __webpack_public_path__ + \"static/media/logo.fcde8201.svg\";","export default __webpack_public_path__ + \"static/media/google.a69a74bd.svg\";","export default __webpack_public_path__ + \"static/media/hello.0a6e74ca.svg\";","export default __webpack_public_path__ + \"static/media/gif.0bbdeb44.gif\";","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nlet firebaseConfig = {\r\n  apiKey: \"AIzaSyACvrHEe6QECxeFgdw28q1VxjYSUaK-wBs\",\r\n  authDomain: \"proyecto-prueba-5d824.firebaseapp.com\",\r\n  projectId: \"proyecto-prueba-5d824\",\r\n  storageBucket: \"proyecto-prueba-5d824.appspot.com\",\r\n  messagingSenderId: \"49325110242\",\r\n  appId: \"1:49325110242:web:0579704419d5b0c79affbb\"\r\n};\r\n// Inicializa Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// Exporta la funcionalidad de la base de datos\r\nexport const firestore = firebase.firestore();\r\n// Exporta el paquete firebase para otros usos\r\nexport const auth = firebase.auth();\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const loginConGoogle = () => auth.signInWithPopup(provider);\r\nexport const logout = () => auth.signOut();\r\nexport const getCurrentUser = () => {\r\n  return auth.currentUser;\r\n};\r\nexport default firebase;\r\n//firebase.initializeApp(firebaseConfig);\r\n// Exporta la funcionalidad de la base de datos\r\n//export const firestore = firebase.firestore();\r\n// Exporta el paquete firebase para otros usos\r\n//export default firebase;\r\n","import React, { useEffect, useState } from 'react';\nimport \"./styles.css\";\nimport corazon from \"./corazon.svg\";\nimport logo from \"./logo.svg\";\nimport google from \"./google.svg\";\nimport hello from \"./hello.svg\";\nimport loadingicon from \"./gif.gif\";\nimport Button from 'react-bootstrap/Button';\nimport Toast from 'react-bootstrap/Toast';\n\nimport { firestore,getCurrentUser, loginConGoogle, auth, logout } from \"./firebase\";\n\nexport default function App() {\n  const [loading] = useState(false);\n  const user1 = getCurrentUser();\n  const [tweets, setTweets] = useState([]);\n  const [tweet, setTweet] = useState({\n    tweet: \"\",\n    autor: \"\",\n    usert: \"\"\n  });\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const desuscribir = firestore\n      .collection(\"tweets\")\n      .onSnapshot((snapshot) => {\n        const tweets = snapshot.docs.map((doc) => {\n          return {\n            tweet: doc.data().tweet,\n            autor: doc.data().autor,\n            id: doc.id,\n            likes: doc.data().likes,\n            usert: doc.data().usert\n          };\n        });\n        setTweets(tweets);\n      });\n    auth.onAuthStateChanged((user) => {\n      setUser(user);\n      console.log(user);\n    });\n    return () => desuscribir();\n  }, []);\n\n  const handleChange = (e) => {\n    let nuevoTweet = {\n      ...tweet,\n      [e.target.name]: e.target.value,\n      usert: user1.email\n    };\n    setTweet(nuevoTweet);\n  };\n\n  const sendTweet = (e) => {\n    e.preventDefault();\n    // enviamos el tweet a la colección\n    firestore.collection(\"tweets\").add(tweet);\n    { !loading ? (\n      <div className=\"loading\">\n        {\" \"}\n        <img src={loadingicon} alt=\"loading\" />\n      </div>\n    ) : null};\n    <p>HEllO</p>\n  };\n\n  //const sendUsert = (id) => {\n    // enviamos el tweuseret a la colección\n    //firestore.doc(`tweets/${id}`).update({ Usert: user.email });\n  //};\n\n\n\n  const deleteTweet = (id) => {\n    // borramos el tweet en firebase\n    firestore.doc(`tweets/${id}`).delete();\n  };\n\n  const ExampleToast = ({ children }) => {\n    const [show, toggleShow] = useState(false);\n  \n    return (\n      <>\n        {!show && <Button onClick={() => toggleShow(true)}>Borrar</Button>}\n        <Toast show={show} onClose={() => toggleShow(false)}>\n          <Toast.Header>\n            <strong className=\"mr-auto\">¿Seguro de Borrar?</strong>\n          </Toast.Header>\n          <Toast.Body>{children}</Toast.Body>\n        </Toast>\n      </>\n    );\n  };\n  const likeTweet = (id, likes) => {\n    if (!likes) likes = 0;\n    // actualizamos el tweet en firebase\n    firestore.doc(`tweets/${id}`).update({ likes: likes + 1 });\n  };\n\n  return (\n    <div className=\"App\">\n      \n      <img height=\"107 px\" weight=\"361 px\" src={logo} alt=\"\" />\n      {user ? (\n        <>\n          \n            <div className=\"user-profile\">\n              \n              <img className=\"user-profile-pic\" src={user.photoURL} alt=\"\" />\n              <div><img src={hello} alt=\"\" /> </div>\n              <p font=\"white\">{user.email}</p>\n              <button onClick={logout}> Log out</button>\n            </div>\n        </>\n      ) : (\n        <div className=\"btn_login\">\n          <img  background=\"white\" src={google} alt=\"\" />\n          <button className=\"login-btn\" onClick={loginConGoogle}>\n            Sigin with Google\n          </button>\n        </div>\n      )}\n      <form className=\"formulario\">\n        <textarea\n          name=\"tweet\"\n          onChange={handleChange}\n          value={tweet.tweet}\n          cols=\"30\"\n          rows=\"5\"\n          placeholder=\"What's happening\"\n        />\n        <div className=\"input-group\">\n          <input\n            name=\"autor\"\n            onChange={handleChange}\n            value={tweet.autor}\n            type=\"text\"\n            placeholder=\"Type your username\"\n          />\n          <button className=\"post\" onClick={sendTweet}>POST</button>\n          {tweet.tweet == null ? (\n          <div className=\"loading\">\n            {\" \"}\n          <img src={loadingicon} alt=\"loading\" />\n          </div>):null};\n        </div>\n      </form>\n      \n      <h1>Tweets:</h1>\n      {tweets.map((tweet) => {\n        return (\n          \n          <div className=\"tweet-container\">\n            <div className=\"tweet\" key={tweet.id}>\n              <div className=\"tweet-info\">\n                <p>{tweet.tweet}</p>\n                <p className=\"tweet-autor\">por: {tweet.autor}</p>\n              </div>\n              <div className=\"acciones\">\n              {user ? (\n                  <>\n                    {tweet.usert == user1.email ? (\n                      \n                        <ExampleToast>\n                          <button onClick={() => deleteTweet(tweet.id)} className=\"delete\">borrar</button>\n                        </ExampleToast>\n                      \n                    ):(<span> </span>)}\n                  </>\n                ): (<span> </span>)}\n                <span\n                  onClick={() => likeTweet(tweet.id, tweet.likes)}\n                  className=\"likes\"\n                >\n                  <img height=\"13px\" src={corazon} alt=\"\" />\n                  <span>{tweet.likes ? tweet.likes : 0}</span>\n                </span>\n              </div>\n            </div>\n                      </div>\n        );\n      })}\n      \n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}